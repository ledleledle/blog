[{"content":"Saya sudah berencana menulisnya sejak lama, namun saya sering lupa. Mumpung ingat saya akan bahas bagaimana saya melakukan setup untuk Kubernetes Cluster mulai dari provisioning server, pemilihan port, hingga kubernetes. Ini adalah artikel yang panjang, saya harap kalian tidak bosan membacanya. Jadi langsung saja kita mulai.\nStruktur Cluster Jadi disini saya ingin membuat total 3 server, 1 untuk server master dan 2 untuk server node.   Infrastruktur Server \nTerraform Pertama, untuk Provisioning server, saya sering menggunakan Terraform. Alat ini sangat cocok dan memang didesain untuk melakukan tugas penyiapan cloud server. Siapkan sebuah file berformat .tf. Untuk installasi Terraform sendiri bisa kalian cek disini. Dan mulailah menulis konfigurasi.\nKonfigurasi yang diperlukan Terraform : Berikut adalah susunan direktori kerja kita untuk terraform.\n├── credentials └── server.tf File Credentials (tidak perlu jika kalian sudah login menggunakan aws-cli). File ini berisi credentials yang diperlukan untuk login ke VPS kita. Normalnya kita menggunakan IAM (Identity and Access Management), namun karena kita menggunakan akun gratisan. Maka itu bisa didapatkan pada halaman Vocareum \u0026gt; Account Detail \u0026gt; Show AWS CLI, lalu copy semua ke dalam file credentials. Kelemahannya ini hanya berlaku sekitar 3 jam.   AWS CLI Credentials \nDalam deskripsinya tertulis Copy and paste the following into ~/.aws/credentials. Namun jika memang tidak mau memasang aws-cli (seperti saya). Kita akan buat file credentials yang nantinya akan dipanggil didalam file konfigurasi terraform.\nFile Konfigurasi Server Disini kita baru mulai tahap provisioning instancenya. Untuk subnet yang saya gunakan adalah subnet default yang by default sudah ada di VPC saya dan untuk SSH Key saya juga sudah memilikinya sebelumnya.\n## AWS Provider terraform { required_providers { aws = { source = \u0026#34;hashicorp/aws\u0026#34; version = \u0026#34;~\u0026gt; 3.0\u0026#34; } } }## Init Credentials Profile and Region provider \u0026#34;aws\u0026#34; { profile = \u0026#34;default\u0026#34; region = \u0026#34;us-east-1\u0026#34; shared_credentials_file = \u0026#34;credentials\u0026#34; }## Public Security Group resource \u0026#34;aws_security_group\u0026#34; \u0026#34;public-sec\u0026#34; { name = \u0026#34;public\u0026#34; description = \u0026#34;Public Server Security Group\u0026#34;## SSH, HTTP, HTTPS Access  ingress { from_port = 22 to_port = 22 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } ingress { from_port = 80 to_port = 80 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } ingress { from_port = 443 to_port = 443 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] }## Kubernetes Cluster  ingress { from_port = 6443 to_port = 6443 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } ingress { from_port = 2379 to_port = 2380 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } ingress { from_port = 10250 to_port = 10250 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } ingress { from_port = 10251 to_port = 10251 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } ingress { from_port = 10252 to_port = 10252 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } egress { from_port = 0 to_port = 0 protocol = \u0026#34;-1\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } tags = { Name = \u0026#34;public\u0026#34; Description = \u0026#34;Public Server Security Group\u0026#34; } }## Elastic IP for Public Instance resource \u0026#34;aws_eip\u0026#34; \u0026#34;lb\u0026#34; { instance = aws_instance.public.id }## Create Public Instance resource \u0026#34;aws_instance\u0026#34; \u0026#34;public\u0026#34; { ami = \u0026#34;ami-00ddb0e5626798373\u0026#34; instance_type = \u0026#34;t2.medium\u0026#34; source_dest_check = false key_name = \u0026#34;key\u0026#34; subnet_id = \u0026#34;subnet-5ba4f616\u0026#34; private_ip = \u0026#34;172.31.16.20\u0026#34; vpc_security_group_ids = aws_security_group.public-sec.*.id tags = { Name = \u0026#34;public\u0026#34; }## Disk Space  root_block_device { delete_on_termination = true encrypted = false iops = 100 volume_size = 10 } }## Node Security Group resource \u0026#34;aws_security_group\u0026#34; \u0026#34;node-sec\u0026#34; { name = \u0026#34;node\u0026#34; description = \u0026#34;Node/Worker Security Group\u0026#34;## SSH Access  ingress { from_port = 22 to_port = 22 protocol = \u0026#34;tcp\u0026#34;## Close all traffic IP after setup! #cidr_blocks = [\u0026#34;172.31.16.20/32\u0026#34;]  cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] }## Kubernetes Cluster  ingress { from_port = 10250 to_port = 10250 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;172.31.16.20/32\u0026#34;] } ingress { from_port = 10255 to_port = 10255 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;172.31.16.20/32\u0026#34;] } ingress { from_port = 30000 to_port = 32767 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;172.31.16.20/32\u0026#34;] } ingress { from_port = 3000 to_port = 3000 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;172.31.16.20/32\u0026#34;] } egress { from_port = 0 to_port = 0 protocol = \u0026#34;-1\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } tags = { Name = \u0026#34;node\u0026#34; Description = \u0026#34;Node/Worker Security Group\u0026#34; } }## Elastic IP for Node Server (Temporary) resource \u0026#34;aws_eip\u0026#34; \u0026#34;lb-node\u0026#34; { count = 2 instance = aws_instance.node[count.index].id }## Create Instance Node resource \u0026#34;aws_instance\u0026#34; \u0026#34;node\u0026#34; { ami = \u0026#34;ami-00ddb0e5626798373\u0026#34; instance_type = \u0026#34;t2.small\u0026#34; associate_public_ip_address = false source_dest_check = false key_name = \u0026#34;key\u0026#34; subnet_id = \u0026#34;subnet-5ba4f616\u0026#34; vpc_security_group_ids = aws_security_group.node-sec.*.id count = 2 tags = { Name = \u0026#34;node-${count.index + 1}\u0026#34; }## Disk Space  root_block_device { delete_on_termination = true encrypted = false iops = 100 volume_size = 10 } } Setelah semuanya terkonfigurasi, informasi tentang kode sudah saya masukkan, untuk lebih lengkapnya bisa kalian baca sendiri pada Website Dokumentasi Terraform, jalankan perintah terraform init untuk inisialisasi version control Terraform dan Terraform juga mengunduh tools yang dibutuhkan untuk provisioning cloud server AWS. Setelah semuanya selesai jalankan perintah terraform apply.\nTulis yes untuk konfirmasi (jika konfigurasi sudah dirasa benar).   [GIF] Terraform Apply \nCek pada EC2 AWS, server yang sudah kita buat tadi.   AWS EC2 \nNote : Untuk port kubernetes yang benar, kalian dapat melihatnya disini, tapi kalau cuma untuk testing All Traffic bukan masalah.\nAnsible Setelah semua instance sudah siap, kita akan melakukan konfigurasi instance menggunakan Ansible. Apa itu Ansible?? Jadi tool ini berguna untuk melakukan tugas-tugas yang berada dalam mesin seperti installasi paket, mengubah file konfigurasi, dll. Dia (Ansible) akan melakukan tugasnya secara struktural dan jika ada satu perintah diatasnya yang gagal, maka proses dibawahnya akan dibatalkan. Anyway\u0026hellip; Disini saya akan melakukan setup mulai dari akses SSH, installasi Docker dan Kubernetes Cluster (sebenarnya pada saat artikel ditulis, kubernetes sudah mengumumkan bahwa support pada Docker akan dihentikan, dan mungkin saat kalian membacanya, cara ini sudah tidak dapat digunakan. Pada saat itu saya akan mengupdate artikel ini.).\nJadi susunan filenya akan terlihat seperti berikut :\n├── inventory ├── ansible.cfg ├── auth_aws.yml ├── docker.yml ├── k8s.yml ├── key └── key.pem 1. inventory Inventory berisi ip atau hostname dari instance yang akan ditargetkan untuk dikonfigurasikan (biasanya ip address). Oleh karena itu saya memasang elastic ip pada instance yang sudah saya buat, agar mereka bisa diakses oleh Ansible dan setelah proses konfigurasi EIP (Elastic IP) bisa dilepas.\n#ubah sesuai dengan IP address kalian [public] 52.4.21.127 [nodes] 35.173.95.146 18.205.203.199 2. ansible.cfg Disini kita bisa mengatur semua file yang dibutuhkan untuk menjalankan Ansible, seperti file inventory yang digunakan, keyfile, default user, dll.\n[defaults] inventory = inventory Private_key_file = key/key.pem remote_user = root ansible_python_interpreter = /usr/bin/python3 host_key_checking = false 3. File berekstensi *.yml File yang berisi konfigurasi seperti apa yang akan kita lakukan (like i said structural code). Kita harus mendikte apa saja yang kita perlukan untuk menyiapkan server (sampai jadi). Pesan dari saya : Kalau bingung lihat namenya saja ya\n3.1 auth_aws.yml Karena AWS tidak memperbolehkan user untuk login melalui root user (demi keamanan), maka kita harus merubah file authorized_key secara manual.\n- hosts:allbecome:truebecome_user:ubuntugather_facts:falsetasks:- name:Copy authorized key from Home to Rootshell:sudo cp /home/ubuntu/.ssh/authorized_keys /root/.ssh3.2 docker.yml Installasi Docker. Disini saya menggunakan fitur hold, fungsinya untuk menghindari update pada package. Kenapa?? Jika kita melakukan setup pada server production, kita memerlukan versi package yang stabil, tujuannya untuk menghindari bug atau perubahan besar-besaran yang dapat menyebabkan server menjadi tidak stabil. Jadi biasanya untuk mencoba update kami memiliki server tersendiri untuk deployment test, jika pada test server sudah stabil, maka server production akan diupdate.\n- hosts:allgather_facts:falsetasks:- name:Update \u0026amp; Upgradeapt:upgrade:distupdate_cache:yes- name:Install Docker Requiremtsapt:name:- ca-certificates- curl- gnupg-agent- python3-pip- software-properties-common- name:GPG Key Dockerapt_key:url:https://download.docker.com/linux/ubuntu/gpg- name:Repo Dockerapt_repository:repo:deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stablestate:presentupdate_cache:yes- name:Install Dockerapt:force:Truename:- docker-ce- name:Hold Dockerdpkg_selections:name:docker-ceselection:hold- name:Install Docker Pycommand:pip3 install docker-py- name:Enable service docker, and enable persistentlyservice:name:dockerenabled:yes- name:Add the user \u0026#39;ubuntu\u0026#39; to docker groupuser:name:ubuntugroup:docker3.3 k8s.yml Akhirnya installasi Kubernetes. Disini saya juga menggunakan fitur hold. Sayang untuk kubeadm (inisialisasi node) saya masih menggunakan cara manual, jadi jika teman-teman memiliki cara yang lebih baik saya akan dengan senang hati menerima saran tersebut.\n- hosts:allgather_facts:falsetasks:- name:Add Google official GPG keyapt_key:url:https://packages.cloud.google.com/apt/doc/apt-key.gpgstate:present- name:Add Kubernetes Repositoryapt_repository:repo:deb http://apt.kubernetes.io/ kubernetes-xenial mainstate:presentfilename:kubernetesmode:0600- name:Installing Kubernetes Cluster Packagesapt:force:Truename:- kubeadm- kubectl- kubeletstate:present- name:Hold kubeadmdpkg_selections:name:kubeadmselection:hold- name:Hold kubectldpkg_selections:name:kubectlselection:hold- name:Hold kubeletdpkg_selections:name:kubeletselection:hold- name:Add line Net Bridge on sysctl.conflineinfile:path:/etc/sysctl.confline:net.bridge.bridge-nf-call-iptables=1- name:Add line \u0026#39;max_map_count\u0026#39; on sysctl.conflineinfile:path:/etc/sysctl.confline:vm.max_map_count=262144- name:Apply change on sysctlshell:sysctl -p- hosts:publicgather_facts:falsetasks:- name:initialize k8s clustershell:kubeadm reset -f \u0026amp;\u0026amp; kubeadm init --pod-network-cidr=10.244.0.0/16register:kubeadm_result- debug:var:kubeadm_result.stdout_lines- name:Make configuration folder for k8sbecome:yesbecome_user:ubuntufile:state:directorypath:/home/ubuntu/.kubemode:0755- name:Copy configuration k8s into homecopy:src:/etc/kubernetes/admin.confdest:/home/ubuntu/.kube/configremote_src:yesowner:ubuntu- name:apply network plugin flannelbecome:yesbecome_user:ubuntushell:kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml- hosts:nodesgather_facts:falsevars_prompt:- name:\u0026#34;kubeadm\u0026#34;prompt:\u0026#34;kubeadm Command \u0026#34;private:notasks:- name:Reset kubeadm \u0026amp; Prune docker imagesshell:kubeadm reset -f \u0026amp;\u0026amp; docker image prune -af- name:Retriving input command kubeadmshell:\u0026#34;{{ kubeadm }}\u0026#34;Jalankan ketiga file ini dengan perintah ansible-playbook nama_file.yml. Untuk k8s.yml, ditengah jalan nanti akan ditanyakan tentang token kubeadm seperti pada GIF dibawah, kalian copy saja log diatasnya jangan lupa tambahkan sudo.   [GIF] k8s.yml kubeadm \nTesting Masuk ke server utama (public) kita melalui SSH.\nssh ubuntu@52.4.21.127 -i key.pem Lalu jalankan perintah kubectl get all atau kubectl get nodes.   kubectl command \nJika semuanya sudah tampil, kita bisa melakukan deployment pods pada cluster kubernetes tersebut. Namun saya tidak akan membahasnya pada artikel ini.\nHapus EIP dan associate_public_ip_address Delete atau beri comment pada file server.tf pada baris EIP.\n## Elastic IP for Node Server (Temporary) #resource \u0026#34;aws_eip\u0026#34; \u0026#34;lb-node\u0026#34; { # count = 2 # instance = aws_instance.node[count.index].id #} Kenapa saya menghapus associate_public_ip_address? Biasanya perintah ini akan memaksa kita untuk me-recreate server. Ini pasti menyebalkan apalagi kita sudah susah-susah setup server sedemikian rupa dengan Ansible. Disatu sisi kita juga membutuhkan fitur ini saat pembuatan server untuk pertama kali. Jadi kalau server sudah dibuat, kita sudah tidak menggunakannya lagi.\n# associate_public_ip_address = false Jalankan perintah terraform apply sekali lagi.\nDestroy Semua Server Kalau kalian bosan, coba jalankan perintah terraform destroy!\nPenutup Dan begitulah cara saya melakukan setup server mulai dari provisioning server, konfigurasi dan membangun kubernetes cluster. Jika ada pertanyaan dan saran, silahkan dikumpulkan dikolom komentar. Sekian dan terimakasih\n","date":"2021-01-12T22:34:00+07:00","permalink":"https://blog.leonprasetya.my.id/p/setup-kubernetes-cluster-pada-aws-educate-mulai-dari-penyiapan-server-sampai-selesai/","title":"Setup Kubernetes Cluster pada AWS Educate Mulai Dari Penyiapan Server Sampai Selesai"},{"content":"Kadang dilingkungan pekerjaan atau perkuliahan, kita sering mendengar tentang Agile dan DevOps namun kita tidak tau apa fungsi mereka. Jadi Agile dan DevOps adalah metodologi pengembangan aplikasi dengan tujuan yang sama yaitu mereka menghasilkan produk akhir secepat dan seefisien mungkin. Awalnya saya mengira dua metodologi ini adalah satu kesatuan, namun setelah saya selidiki dan membaca lebih dalam ternyata mereka berbeda. Apa saja perbedaannya? Dan apakah mereka bisa digunakan dalam satu proses yang sama? Mari kita bahas terlebih dahulu apa itu Agile dan DevOps.\nAgile Jadi Agile Development ini pertama kali dicetuskan oleh Kent Beck dan kawan-kawan pada tahun 2001. Mereka mendiskusikan tentang bagaimana cara mengembangkan sebuah perangkat lunak menjadi lebih baik, efisien dan cepat. Metode Agile mengutamakan interaksi antar tim dan review/tanggapan dari client walaupun itu dapat menyebabkan keterlambatan dalam proses pengembangan. Jadi dari sana pihak pengembang dan client saling terhubung untuk menciptakan suatu perangkat lunak.\nBisa kalian cek pada webiste https://agilemanifesto.org untuk manifesto dari Agile.\nMenurut saya Agile berada dalam area yang abstrak dan sulit dipahami. Kendati demikian, ada proses, metode, dan praktik yang bisa kita implementasikan, dan itu membantu kita memahami filosofi tentang Agile.\nSaat belajar tentang Agile, kita akan menemukan proses perangkat lunak seperti Scrum, Extreme Programming, dan Adaptive Software Development. Itu adalah contoh proses yang menerjemahkan nilai dan prinsip Agile dalam praktik. Selain itu, ada metode yang populer di dunia Agile seperti user story, story point, burndown chart, daily meeting, dan retrospective. Masing-masing proses dan metode memenuhi nilai dan prinsip Agile dengan kedalaman yang berbeda-beda.\nDevOps Sedangkan untuk DevOps yaitu metodologi pengembangan perangkat lunak yang bertujuan untuk menyatukan tim pengembangan perangkat lunak dan tim teknologi informasi. Ini adalah konsep yang menumbuhkan budaya kolaborasi antara kedua tim yang sebelumnya bekerja secara terpisah , dari tahap desain awal hingga rilis sebuah produk.\nDevOps adalah metodologi yang menggabungkan pengembangan perangkat lunak (Dev) dengan operasional (Ops). Tujuannya adalah untuk memungkinkan komunikasi antara tim sehingga mereka dapat membangun, menguji, dan merilis perangkat lunak lebih cepat dan dengan efisiensi dan kecepatan yang lebih besar.\nDalam menggabungkan dua tim dengan proses yang berbeda ini diharapkan memberikan produk dan layanan yang berkualitas tinggi secara berkesinambungan melalui integrasi berkelanjutan, distribusi berkelanjutan, pengujian seacara otomatis, dan transparansi dalam repositori kode.\nAlur DevOps berbeda dengan Agile, disini tidak ada kontak dari client. Pengembang akan merencanakan seperti apa perangkat lunaknya berjalan, setelah itu mereka akan melakukan serangkaian proses seperti Build, Test, Release, Deploy dan Monitoring, dari data monitoring tersebut jika ada kesalahan atau ketidak sesuaian dari perangkat lunak, pengembang akan mengulangi prosesnya dari awal (tahap perencanaan).\nJadi apa bedanya Agile dengan DevOps?  Agile menggunakan sprint, yang berkisar dari satu minggu hingga bulan sebagai cara untuk mengatur jadwal pengembangan sementara DevOps fokus pada rilis cepat yang dimulai dengan beberapa hari. Agile berfokus pada feedback dari client sedangkan DevOps tidak.  Apakah Agile dan DevOps dapat bekerja bersama? Jika ditanya begitu, jawabannya Kenapa tidak?\u0026hellip; Ketika diterapkan bersama-sama, Agile dan DevOps dapat memungkinkan organisasi untuk mengembangkan dan mengimplementasikan teknologi dengan kecepatan yang jauh lebih besar. Ada penekanan pada menempatkan kebutuhan pelanggan/client berada di garis depan diatas teknologi apa pun yang akan dikembangkan.\nAgile dan DevOps masing-masing merujuk pada dua hal berbeda, terkadang beberapa organisasi menggunakan satu metodologi untuk mengaktifkan yang lain misalnya menggunakan metodologi Agile sebagai motivator untuk mengembangkan culture DevOps.\nSumber  Pengalaman Pribadi https://medium.com/@ardi.alhaidar/apa-itu-agile-sebenarnya-41a14762b4e4 https://id.wikipedia.org/wiki/Agile_Development_Methods https://en.wikipedia.org/wiki/DevOps  Foot note Maaf jika penjelasannya agak berbelit belit. Jika ada kekurangan dan kesalahan jangan sungkan untuk mengkoreksi penulis (saya)\u0026hellip;Sekian dari saya semoga dapat mencerahkan kalian (para pembaca)\u0026hellip;\n","date":"2020-12-22T09:34:23+07:00","image":"https://blog.leonprasetya.my.id/p/perbedaan-antara-devops-dan-agile/index_hub54621195e11b0c896a19d15b30f4761_31701_120x120_fill_box_smart1_2.png","permalink":"https://blog.leonprasetya.my.id/p/perbedaan-antara-devops-dan-agile/","title":"Perbedaan antara Devops dan Agile"},{"content":"Hari ini saya akan bahas tentang AWS Server namun ini lebih ke pembuatan akunnya. Jadi AWS memang menyediakan layanan gratis untuk edukasi yang bernama AWS Educate. Disana, kita bisa mendapatkan akun AWS dengan credit senilai $100 dengan durasi 1 tahun. Nah ini cocok sekali untuk kalian yang ingin belajar DevOps/Infra (yang penting jangan buat minning 😂). Tentu saja blog ini akan terus membahas tentang cloud services, jadi akun AWS ini akan sangat membantu kalian dalam proses belajar.\nBuat akun AWS Educate dulu. Pergi ke halaman AWS Educate, lalu klik menu Join AWS Educate.   AWS Educate Homepage \nPilih role sebagai Murid/Student (Tergantung kebutuhan sih\u0026hellip; Kalau disini saya memang sebagai murid). Lalu tolong isi form yang diberikan dengan benar. Karena email akan digunakan untuk konfirmasi nantinya. Kalau sekolah kalian tidak ada didalam list, cantumkan saja Kementerian Pendidikan dan Kebudayaan atau Kementerian Komunikasi dan Informatika.   Role \nPastikan juga kalian memilih bulan dan tahun kelulusan (Graduation Month \u0026amp; Graduation Year) setahun dari sekarang, misal sekarang Desember 2020 pilih tanggal kelulusannya Desember 2021. Kira-kira tampilan akhirnya seperti ini.   Form Pendaftaran AWS Educate \nDah selanjutnya tinggal klik I Agree saja. Setelah pendaftaran selesai, maka kita akan mendapatkan email verifikasi dari AWS.   Email Verifikasi \nSetelah email sudah dikonfirmasi, saatnya menunggu email balasan dari AWS. Jika diterima seperti ini balasannya.   Approved!!! \nSekarang coba login ke AWS Educate. Lalu pergi ke tab AWS Account. Klik AWS Educate Starter Account.   AWS Educate Starter Account \nNanti kita akan dialihkan ke website pihak ke-3. Disana kelihatan credits kalian tinggal berapa.   Vocareum \nNice kita sudah masuk pada page EC2 Management. Namun untuk praktek penggunaan EC2 ini tidak akan saya bahas sekarang.   EC2 \nYeah\u0026hellip; Met belajar cuyy!!!\nNantikan artikel berikutnya tentang penggunaan AWS Cloud. Sampai jumpa\u0026hellip;!!!\n","date":"2020-12-20T19:34:30+07:00","permalink":"https://blog.leonprasetya.my.id/p/cara-membuat-akun-aws-educate-100-gratis/","title":"Cara membuat akun AWS Educate $100 Gratis"},{"content":"Sebelumnya saya telah membuat tutorial How I Made Hugo Blog. Ini lanjutan yang telah saya janjikan. Dan maaf saya sekarang pakai Bahasa Indonesia, karena ternyata setelah saya membuat postingan tersebut ternyata Bahasa Inggris saya masih kacau dan terlihat di postingan sebelumnya bahasanya kacau sekali (jadi malu). Yah tidak usah basa-basi lagi.\nTutorial 1. Generate Static Files Jika sebelumnya kita hanya menjalankan server local dengan perintah hugo server. Sekarang kita akan meng-generate file statis dengan perintah hugo --minify. Perintah tersebut akan menjadikan tulisan dan tema yang kalian buat menjadi file statis yang bisa kalian temui di folder public.\n2. Buat Repo Github Kita pakai cara mudah saja. Yaitu, pada browser kita buat repo di Github. Nama repo terserah kalian, buat tanpa README.\nSetelah repo dibuat, disana terdapat tutorialnya tentang cara membuat repository di command line kalian.\nLangsung buka terminal, masuk ke folder blog kalian dan langsung menuju folder public\ncd blog/public Lalu inisiasi repo github yang telah dibuat tadi.\ngit init git commit -m \u0026#34;first commit blog\u0026#34; git remote add origin https://github.com/\u0026lt;your_username\u0026gt;/nama_repo.git git push -u origin master # ganti username dan nama_repo dengan milik kalian masing-masing Setelah proses push berhasil, kembali buka browser kalian, lalu menuju Setting repository kalian. Scroll kebawah sampai menemukan tulisan Github Pages. Klik pada menu dropdown None. Lalu kill branch yang kalian inginkan, dalam case ini, tadi kita pakai master branch. Jadi klik itu saja (seperti gambar dibawah).   Github Page \nDan website kalian sudah mengudara di internet.\nKarena blog ini berfokus pada DevOps, tidak enak rasanya jika harus melakukan perintah berulang-ulang setiap akan melakukan post artikel baru. Selanjutnya saya akan membahas tentang CI/CD pada Github Actions untuk hosting Hugo\u0026hellip;\n","date":"2020-04-29T00:16:59+07:00","image":"https://blog.leonprasetya.my.id/p/host-website-hugo-di-github/hugo_huf7630602c9bedf706ad0ded87d4ffc01_56751_120x120_fill_box_smart1_2.png","permalink":"https://blog.leonprasetya.my.id/p/host-website-hugo-di-github/","title":"Host Website Hugo di Github"},{"content":"Intro Hey guys, i’ll teach you how to made blog with hugo. First i’ll explain a bit about hugo, Hugo is a fast and modern static site generator written in Go language, so basically you don’t need some back-end code. You just install it, made a content, then generate your html code. Simple enought right. So let’s jump to tutorial.\nSpecification and requirements First, i use Arch Linux Distros, the installation maybe a bit differ, but others absolutelly same. Make sure your repository always up to date.\nsudo pacman -Syu hugo If you use other distros, you can check a link here Hugo Installation Guide\nTutorial Okay.. i assume you’re already install Hugo, once Hugo installed, you can create a Hugo sites by running.\nhugo new site blog #replace blog with the name you want Then go to your site directory.\ncd blog So… Next we need template. Find one at Official Hugo Website Here. There are many choices, choose the one you like. For example i choose Hugo.386. Download theme using git.\ngit submodule add https://gitlab.com/maxlefou/hugo.386 themes/hugo.386 If you facing error like this.\nfatal: not a git repository (or any of the parent directories): .git Try git init to your main folder. Then run command git submodule again.\nThen go to themes/hugo.386/exampleSite. There are examples that you can use.   ExampleSite Folder \nCopy all (except README.md). To your main directory. Like this.   Copy all on root folder \nOpen config.toml. Edit everything you need, if there is anything you don’t need, just mark it with #. The following example.\nbaseurl = \u0026#34;/\u0026#34; title = \u0026#34;ledleledle\u0026#39;s Blog\u0026#34; #languageCode = \u0026#34;en\u0026#34; #DefaultContentLanguage = \u0026#34;en\u0026#34; preserveTaxonomyNames = true theme = \u0026#34;hugo.386\u0026#34; ... You can freely customize the information in config.toml files. If you done, lets test the site by running this command.\nhugo serve Open http://localhost:1313 in your browser.   Tadaa…!!! \nTo add new content in your blog, simply running this command.\nhugo new post/new_article.md Fill the content as you like, see an example of the writing on content folder that you copied before. Next. I’ll post tutorial to host it on Github Page.\nOutro Well thats it… If you’re facing a problem comments down bellow. See you in next tutorial.\n","date":"2020-04-24T00:16:59+07:00","image":"https://blog.leonprasetya.my.id/p/how-i-made-hugo/hugo_huf7630602c9bedf706ad0ded87d4ffc01_56751_120x120_fill_box_smart1_2.png","permalink":"https://blog.leonprasetya.my.id/p/how-i-made-hugo/","title":"How I Made Hugo"},{"content":"Halo teman-teman, kali ini saya akan membahas tentang bagaimana cara reflash original firmware dari OpenWRT pada router TP-Link MR3420 V.2. Kebetulan diminggu-minggu ini saya ingin menjual router saya karena menurut saya router ini sudah outdate dan dirumah juga sudah punya yang baru.\nSpesifikasi dan Kebutuhan  Router (sudah pasti) OS Linux Firmware bawaan TP-Link disini  Tutorial Step pertama, ekstrak file firmware terlebih dahulu\nunzip \u0026#34;TL-MR3420_V2_150319.zip\u0026#34; Rename file firmware dengan nama firmware.bin agar dalam pengerjaannya jadi lebih mudah dan simple.\nmv \u0026#34;mr3420v2_en_3_16_9_up_boot(150319).bin\u0026#34; firmware.bin Hapus beberapa byte dari Firmware dengan perintah dd. Bila perintah ini tidak dijalankan maka hasilnya anda akan mendapatkan pesan error Writing from /tmp/firmware.bin to firmware … [e]Failed to erase block saat proses flashing firmware.\n#command dd if=firmware.bin of=original.bin skip=257 bs=512 #log 7680+0 records in 7680+0 records out 3932160 bytes (3.9 MB, 3.8 MiB) copied, 0.0352155 s, 208 MB/s Upload Firmware ke router kalian dengan perintah scp\nscp original.bin root@4.3.2.1:/tmp  Q : Kok ipnya 4.3.2.1? A : Iya itu setting ip router saya sebelumnya.  Masuk ke sistem router melalui ssh dengan perintah\nssh root@4.3.2.1  Note : inget ya, sesuaikan dengan ip router kalian masing-masing.\n Install firmware original TP-Link #command mtd -r write /tmp/original.bin firmware #log Unlocking firmware ... Writing from /tmp/original.bin to firmware ... Rebooting ... Setelah proses selesai, router akan restart dengan sendirinya.\nBagaimana tutorialnya? mudah bukan, semoga bermanfaat untuk kalian, sekian dari saya terimakasih.\n","date":"2020-04-24T00:16:59+07:00","image":"https://blog.leonprasetya.my.id/p/reflash-original-firmware-tp-link-mr3420-v.2/index_hu4a37e72759dcf23e0c2bbe493cab5a41_29892_120x120_fill_box_smart1_2.png","permalink":"https://blog.leonprasetya.my.id/p/reflash-original-firmware-tp-link-mr3420-v.2/","title":"Reflash Original Firmware TP-Link MR3420 V.2"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://blog.leonprasetya.my.id/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.leonprasetya.my.id/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]